# -*- coding: utf-8 -*-
"""Another copy of Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JzbIDBSugHsjjOiFsIC-wp5dbGWZj8Oa
"""

list = [1,2,3,4,5,"Hello",6.2,True]
for i in list[2:4]:
    print(list)



list = [1,2,3,4,5,"Hello",6.2,True]
for i in list[3:8:1]:
    print(i)

for i in range(10):
  print(i)

for i in range(1,10):
  print(i)

for i in range(1,10,3):
  print(i)

from typing import Tuple
Tuple1 = [1,2,3,4,5]

Tuple2 = [6,7,8,9,10]

Tuple3 = Tuple1 + Tuple2

print(Tuple3)

Dict = {
    "Name" : "Vinay Sharma",
    "Rtu Roll No." : "23EACCA054"

}
print(Dict)

try :
    x = 1 / 0
except ZeroDivisionError:
    print("You can't divide by Zero")

print("Hello, World!")
try:
    x = 1 / 0
    print(x)
except Exception:
   print("An error occured")
print("jwhfjrfhfhih")

x=int(input("enter the value of x:"))
try:
    if x<2:
        print("x is less than or equal to 2")
except x>2:
    print("x is greater than 2")

list = [1,2,3,4,5,6,7,8,9,10,10]

Set = set(list)

print(Set)

list = []

for i in range(10):
  x = int(input("Enter a number:"))
  list.append(x)
print(list)

list = []

for i in range(10):
  x = int(input("Enter a number:"))
  list.append(x)

set = {1,2,3,4,5,6,7,8,10,10,10,10,9}

set.add(11)
print(set)

list = []
for i in range(9):
    try:
        x = input("give the value in x: ")
        list.append(x)
    except KeyboardInterrupt:
        print("Input interrupted. Proceeding with the collected data.")
        break

SET = set(list)
print(SET)

def add(a,b):
  c = a + b
  print(c)
add("a" , "b")

def add(a,b):
  c = a + b
  print(c)
add(1,2)
add(10,20)

def add(a,b):
  c = a + b
  print(c)
def sub(a,b):
  c = a - b
  print(c)
def mul(a,b):
    c = a * b
    print(c)
def div(a,b):
      c = a / b
      print(c)
div(10,2)
mul(10,2)
sub(10,2)
add(10,2)

def xyz(*args):
  print(args)

xyz(1,2,3,4,5,6,7,8,9,10)

def xyz(num , *args):
  print(num)
  print("_______")
  print(args)

xyz(1,2,3,4,5,6,7,8,9,10)

def xyz(**kwargs):
  print(kwargs)

xyz(Name="Vinay Sharma")

sum = 10
def xyz(a,b):
  sum = a + b
  return sum
abc = xyz(1,2)
print(abc)
print(sum)

def xyz(a,b):
  sum = a + b
  return sum
abc = xyz(1,2)
print(abc)
print(sum)

def add(n):
  if n == 1:
    return 1
  return n + add(n-1)

print(add(10))

def factorial(n):
  if n == 1:
    return 1
    return (n) + factorial(n-1)

print(factorial(10))

def fb(n):
  if n <= 0:
   return "Positive integer please"
  elif n == 1:
    return 0
  elif n == 2:
      return 1
      return fb(n-1) + fb(n-2)
xyz = fb(10)
print(xyz)

def fabonacci(n):
  if n <= 0:
    return "Positive integer please"
  elif n == 1:
      return 0
  elif n == 2:
     return 1

  return fabonacci(n-1) + fabonacci(n-2)
for i in range(1,11):
     print(fabonacci(i), end="")

add = lambda a,b: a + b
print(add(1,2))

add = lambda a,b: a if a > b else b
print(add(1,2))

dd = lambda a,b: a if a > b else b
print(add(44,22))

def abc(function):
  def wrapper():
    function()
  return wrapper()

@abc
def xyz():
    print("Vinay Sharma")

import time

print(time.time())

import time

def timemeasure(function):
  def wrapper(*args,**kwargs):
    start = time.time()
    result = function(*args, **kwargs)
    end = time.time()
    print(end - start)
    return result
  return wrapper

@timemeasure
def pause():
  time.sleep(2)
print("pause function ended")

@timemeasure
def quick():
  time.sleep(2)
print("quick function ended")

pause()
quick()

def timemeasure(function):
  def wrapper(*args,**kwargs):
    import time  # Import time inside wrapper
    start = time.time()
    result = function(*args,**kwargs)
    end = time.time()
    print(end - start)
    return result
  return wrapper

@timemeasure
def fabonacci(n):
  if n <= 0:
    return "Positive integer please"
  elif n == 1:
    return 0
  elif n == 2:
    return 1
  else:
    return fabonacci(n-1) + fabonacci(n-2)

for i in range(1,11):
  print(fabonacci(i), end="")

import time

def timemeasure(function):
  def wrapper(*args,**kwargs):
    start = time.time()
    result = function(*args,**kwargs)
    end = time.time()
    print(end - start)
    return result
  return wrapper

@timemeasure
def sum(n):
  if n <= 1:
    return 1
  return n + sum(n-1)

print(sum(10))

YXZ = 8168153846

print(len(str(YXZ)))

list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]

print(sum(list))



int = -100
print(abs(int))

int = 3 + 5
print(abs(int))

int = 3 + 5j
print(abs(int))

PI = 3.14159265359

print(round(PI,2))
print(round(PI,3))

list = [1,2,3,4,5,6,7,8,9,10]

for index, value in enumerate(list):
    print(f"{index}-{value}")

PI = 3.14159265359

print(f"{PI:.2f}")
print(f"{PI:.3f}")

SQUARE = lambda x,y: x * y

NUM = int(input("please enter a number:"))
NUM = int(input("please enter another number:"))

print(f"{NUM}")

class XYZ:
  def __init__(self):
    self.ABC = "123"

  def get(self):
    return self.ABC

declare_class = XYZ()
value = declare_class.get()
print(value)

class XYZ:
  def __init__(self):
    self._balance_ = 0

  def deposite(self,amount):
    self._balance_ += amount
    return True

  def withdraw(self,amount):
    if 0 < amount <= self._balance_:
      self._balance_ -= amount
      return True

    return False

  def get(self):
    return self._balance_

ABC = XYZ()
print(ABC.get())
ABC.deposite(10000)
print(ABC.get())
ABC.withdraw(1000)
print(ABC.get())
ABC.withdraw(9000)
print(ABC.get())

import random

class GuessTheNumber:
    def __init__(self):
        self.low = 1
        self.high = 1
        self.lives = 3
        self.number = 0

    def set_range(self, high):
        if (self.low + 1) < high:
            self.high = high
            self.number = random.randint(self.low, self.high)
        else:
            return "Please give a bigger digit"

    def play(self):
        guesses = 0
        while guesses < self.lives:
            guess = int(input("please enter a number: "))
            if guess == self.number:
                print("You Won!")
                return
            else:
                guesses += 1
                print(f"Incorrect guess. You have {self.lives - guesses} lives left.")

        print(f"You lost! The number was {self.number}")


game = GuessTheNumber()
game.set_range(10)
game.play()

import random

class GuessTheNumber:
  def __init__(self):
    self.low = 1
    self.high = 1
    self.live = 3
    self.gusses = 0


  def set_range(self, high):
    if (self.low + 1) < high:
      self.high = high
    else:
      return "please give a bigger digit"

  def play(self):
    if (self.low + 1) > self.high:
      print("Please restart the game")
      return

    while self.gusses < 3:
      self.gusses += 1
      num = random.randint(self.low, self.high)
      guess = int(input("please enter the number: "))
      if guess == num:
        print("you won")
        return
      else:
        print("please try again")

# Start the game 4
game = GuessTheNumber()
game.set_range(10)
game.play()